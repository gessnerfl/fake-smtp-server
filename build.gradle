plugins {
    id "pl.allegro.tech.build.axion-release" version "1.15.3"
    id "org.springframework.boot" version "3.1.0"
    id "org.sonarqube" version "4.2.1.3168"
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id "com.github.node-gradle.node" version "5.0.0"
    id("io.freefair.lombok") version "8.0.1"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply plugin: "org.sonarqube"

scmVersion {
    tag {
        prefix = ""
    }
}

group = "de.gessnerfl"
description = """Fake SMTP Server :: Simple SMTP Server which stores emails in memory and lists email in a web ui"""
project.version = project.findProperty("projectVersion") ?: scmVersion.version
project.archivesBaseName = "fake-smtp-server"

ext.scmUrl = "git@github.com:gessnerfl/fake-smtp-server.git"
ext.projectUrl = "https://github.com/gessnerfl/fake-smtp-server"

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("commons-io:commons-io:2.13.0")
    implementation("org.yaml:snakeyaml:2.0")
    implementation('org.flywaydb:flyway-core')
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.3")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0')

    runtimeOnly("com.h2database:h2:2.1.214")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.ow2.asm:asm:9.5")
    testImplementation("org.apache.commons:commons-lang3:3.12.0")
    testImplementation("org.hamcrest:hamcrest-core:2.2")

    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

java {
    withSourcesJar()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Xlint:unchecked"
    }
}

node {
    nodeProjectDir = file("${project.projectDir}/webapp")
}

tasks.register('webappNpmBuild', NpmTask) {
    dependsOn(npmInstall)
    args = ["run", "build"]
}

tasks.register('webappNpmTest', NpmTask) {
    dependsOn(webappNpmBuild)
    args = ["run", "test", "--", "--coverage", "--watchAll=false"]
}

tasks.register('copyStaticAssets', Copy) {
    dependsOn(compileJava, compileTestJava, webappNpmTest, resolveMainClassName)
    from(file('webapp/build'))
    into(file('build/resources/main/static/'))
    exclude("index.html")
}

tasks.register('copyTemplateAssets', Copy) {
    dependsOn(compileJava, compileTestJava, webappNpmTest, resolveMainClassName)
    from(file('webapp/build/index.html'))
    into(file('build/resources/main/templates/'))
    filter { line -> line.replaceAll(/(href|src)(=\")([^\"]+)(\")/, 'th:$1$2@{$3}$4').replaceAll(/(name="base-path"\s+)(content=")([^"]+)(")/, '$1th:$2@{$3}$4') }
}

jar {
    dependsOn(copyStaticAssets, copyTemplateAssets)
}

bootJar {
    dependsOn(copyStaticAssets, copyTemplateAssets)
}

springBoot {
    buildInfo {
        properties {}
    }
}

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "gessnerfl-github"
        property "sonar.projectName", "Fake SMTP Server"
        property "sonar.projectKey", "de.gessnerfl.fake-smtp-server"
        property "sonar.sources", "src/main,webapp/src"
        property "sonar.test.inclusions", "src/test/**/*.*, webapp/src/**/*.spec.ts, webapp/src/**/*.spec.tsx"
        property "sonar.javascript.lcov.reportPaths", "./webapp/coverage/lcov.info"
        property "sonar.coverage.exclusions", "webapp/src/setupTests.ts, webapp/src/setupProxy.js"
    }
}

test {
    dependsOn(copyStaticAssets, copyTemplateAssets)
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jib {
    from {
        image = 'amazoncorretto:17.0.7-al2023-headless'
        container {
            ports = ["8080", "8081", "8025"]
            creationTime = 'USE_CURRENT_TIMESTAMP'
            jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Dfile.encoding=utf-8']
        }
        extraDirectories {
            paths {
                path {
                    from = 'webapp/build'
                    into = '/app/resources/static'
                }
            }
        }
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
//            platform {
//                architecture = 'arm64'
//                os = 'linux'
//            }
        }
    }
    to {
        image = 'gessnerfl/fake-smtp-server'
        tags = [scmVersion.version, 'latest']
        auth {
            username = DOCKERHUB_USERNAME
            password = DOCKERHUB_TOKEN
        }
    }
}
